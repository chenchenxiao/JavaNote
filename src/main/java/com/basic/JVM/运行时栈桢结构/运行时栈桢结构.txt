1、栈桢是用于支持虚拟机进行方法调用和方法执行的数据结构，是虚拟机栈的栈元素

2、栈桢存储了局部变量表，操作数栈，动态连接和方法返回地址等信息

3、栈桢需要多大的局部变量表，多深的操作数栈是在编译时就已经完全确定的了

4、对于执行引擎来说，在活动线程中，只有当前栈顶的栈桢才是有效的，称做当前栈桢，与当前栈桢对应的方法是当前方法
   执行引擎运行的所有字节码指令都只针对当前栈桢进行操作

    局部变量表
        是一组变量值的存储空间，用于存储方法参数和方法内部定义的局部变量，在编译成Class就已经确定了大小
        使用索引定位的方式使用局部变量表，索引从0开始，如果执行的是非static方法，那第0个位置是用于传递方法所属对象实例的引用
        虚拟机使用局部变量表完成参数值到参数变量列表的传递过程

    操作数栈
        当方法开始执行时，该方法的操作数栈是空的，在执行过程中，会有各种字节码指令往操作数栈中写入和提取内容，也就是出/入栈

    动态连接
        每个栈桢都包含一个执行常量池中该栈桢所属方法的引用，字节码中方法的调用指令以常量池中指向方法的符号引用作为参数
        每次运行都会转化为直接引用的符号引用，称作动态连接

    方法返回地址
        当方法开始执行后，只有两种方式可以退出这个方法
        1、正常完成出口：执行引擎遇到任意一个方法返回的字节码指令，可能会有返回值传递给上层的方法调用者
                         正常退出时，PC计数器的值可以作为返回地址，栈桢中很可能会保存该值
        2、异常完成出口：在方法执行过程遇到了异常，并且没有在方法体内得到处理，会导致方法退出
                         异常退出时，返回地址是要通过异常处理器来确定的，栈桢一般不会保存这部分信息+
        方法退出其实就是相当于当前栈桢出栈，退出时可能操作：恢复上层方法的局部变量表和操作数栈，把返回值压入调用者栈桢的操作数栈
        调整PC计数器的值以指向方法调用指令后面的一条指令

    方法调用：
        一切方法调用在Class文件里存储的都只是符号引用，而不是方法的直接引用，调用的目标在Class文件里是一个常量池的符号引用
        在类加载时的解析阶段完成转化
