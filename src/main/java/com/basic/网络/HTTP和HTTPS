HTTP:
    1、无状态：协议对客户端没有状态存储，对事物处理没有记忆能力，比如访问一个网站需要反复进行登录操作
    2、无连接：含义就是限制每次连接只处理一个请求，HTTP/1.1之前，由于无状态特点，每次请求需要通过TCP三握四挥来与服务器建立连接。比如某个客户机在
               短时间内多次请求同一个资源，服务器并不能区分是否已经响应过用户的请求，所以每次需要重新响应请求，需要消耗不必要的时间和流量
    3、基于请求和响应：基本的特性，由客户端发起请求，服务端响应
    4、简单快速：客户端发送请求时，只需传送请求方法和路径，Http服务器程序规模小，因为通信速度快
    5、灵活：HTTP运行传输任何类型的数据对象，正在传输的类型由ContentType标记
    6、通信使用明文，请求和响应不会对通信方进行确认，无法保证数据的完整性

HTTPS：
    1、内容加密：采用混合加密技术，中间者无法直接查看明文内容
    2、验证身份：通过证书认证客户端访问的是自己的服务器
    3、保护数据的完整性：防止传输的内容被中间人冒充或篡改

常见状态码：
    200：OK，表示客户端请求成功
    400：Bad Request，客户端请求语法有问题，不能被服务端理解
    401：Unauthorized，请求未经授权
    403：Forbidden，服务器收到请求，但是拒绝提供服务
    404：Not Found，请求的资源不存在
    500：Internal Server Error， 服务器发生不可期的错误
    503：Server Unavalible，服务器当前不能处理请求，过一段时间后可能会恢复正常

HTTP的请求数据：
    请求行：请求的方法，URL和HTTP版本
    请求头部：产生请求的浏览器类型，
    请求数据
    空行：发送回车符和换行符，，通知服务器以下不再有请求头

HTTPS实现原理：
    1、客户端向服务端发送请求，然后连接到服务端的443端口。
    2、服务端必须有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过才可以继续访问，
       而使用受信任的公司申请的证书则不会弹出提示页面，这套证书其实就是一对公钥和私钥
    3、发送证书：这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间，服务端的公钥，第三方证书认证机构（CA）的签名，
       服务端的域名信息等内容
    4、客户端解析证书：这部分工作是由客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，
       提示正属于证书存在问题。如果证书没有问题，那么就生成一个随机值（秘钥）。然后用证书对该随机值进行加密。
    5、传送加密信息：这部分传送的是用证书加密后的秘钥，目的就是让服务端得到这个秘钥，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。
    6、服务端加密信息：服务端用私钥解密秘密秘钥，得到了客户端传过来的私钥，然后把内容通过该值进行对称加密。
    7、传输加密后的信息：这部分信息是服务端用私钥加密后的信息，可以在客户端被还原。
    8、客户端解密信息：客户端用之前生成的私钥解密服务端传过来的信息，于是获取了解密后的内容。

缺点：
    1、SSL证书需要购买申请，功能越强大的证书费用越高
    2、SSL证书通常需要绑定IP，不能再同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗
    3、HTTPS协议会使页面的加载时间延长50%,增加10%到20%的耗电
    4、HTTPS连接缓存不如HTTP高效，流量成本高
    5、HTTPS连接服务器资源占用高很多，支持访客多的网站需要投入更大的成本
    6、HTTPS协议握手阶段比较费时，对网站的响应速度有影响。
    7、通信慢:和HTTP相比，SSL/TSL通信部分消耗网络资源，而SSL/TSL通信部分，因为要对通信处理，所以时间上延长了
    8、资源消耗导致处理缓慢：由于HTTPS还需要做客户端和服务端的加密解密操作，因此会消耗CPU和内存等硬件资源。

证书如何安全传输，被调包了怎么包？ 数字签名和数字证书保证了传输的安全性
    数字证书包括了加密服务器的公钥、权威机构的信息、服务器域名，还有经过CA私钥签名之后的证书内容（经过先通过Hash函数计算得到证书数字的摘要，
    然后用权威机构私钥加密数字摘要得到数字签名），签名计算方法以及证书对应的域名。当客户端收到这个证书之后，
    使用本地配置的权威机构的公钥对证书进行解密得到服务器公钥和证书的数字签名，数字签名经过CA公钥解密得到证书的信息摘要，
    然后根据证书上描述的计算证书的方法计算一下当前证书的信息摘要，与收到的信息摘要作对比，如果一样，服务器下发的，没有被篡改过，因为中间人过，
    因为中间人虽然有权威机构的公钥，能够解析证书内容并篡改，但是篡改之后中间人需要将证书重新加密，但是中间人没有权威机构的私钥，无法加密，
    强行加密只会导致客户端无法解密，如果中间人强行乱修改证书，就会导致证书内容和证书签名不匹配。

为什么要找CA颁发证书
    因为有可能客户端持有的公钥被替换了或者是出现了问题，服务端对应私钥的冒充接收方就有可能接收到服务端发送报文，
    这个时候需要有一个权威的值得信赖的第三方机构来统一对外发送主机机构的公钥，这样能避免上述问题

数字证书的颁发过程为：用户首先产生自己的密钥对，并将公共密钥及部分个人信息传送给认证中心。认证中心核实身份后，
                      然后发送给用户一个数字证书，证书内包含用户的个人信息和他的公钥信息，还附有认证中心的签名信息。

数字签名：发送方用一个哈希函数从报文文本中生成报文摘要，用自己的私人密钥对该摘要进行加密，与原文一起发送给接收方，
          接受者只有用发送者的公钥才能解密被加密的摘要信息，然后用于发送方养的计算方法方法对收到的原文产生一个摘要信息，
          与解密的摘要信息对比，如果相同则说明收到的信息是完整的，否则反之。
